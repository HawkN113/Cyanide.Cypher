//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Experiments\Cyanide.cypher\src\Cyanide.Cypher\Grammar\SQL.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="SQLParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
internal interface ISQLListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.sqlStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSqlStatement([NotNull] SQLParser.SqlStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.sqlStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSqlStatement([NotNull] SQLParser.SqlStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.selectStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectStatement([NotNull] SQLParser.SelectStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.selectStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectStatement([NotNull] SQLParser.SelectStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.selectElements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectElements([NotNull] SQLParser.SelectElementsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.selectElements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectElements([NotNull] SQLParser.SelectElementsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.tableSource"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTableSource([NotNull] SQLParser.TableSourceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.tableSource"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTableSource([NotNull] SQLParser.TableSourceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.joinClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJoinClause([NotNull] SQLParser.JoinClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.joinClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJoinClause([NotNull] SQLParser.JoinClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.joinType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJoinType([NotNull] SQLParser.JoinTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.joinType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJoinType([NotNull] SQLParser.JoinTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.whereClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhereClause([NotNull] SQLParser.WhereClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.whereClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhereClause([NotNull] SQLParser.WhereClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.groupByClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGroupByClause([NotNull] SQLParser.GroupByClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.groupByClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGroupByClause([NotNull] SQLParser.GroupByClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.havingClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHavingClause([NotNull] SQLParser.HavingClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.havingClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHavingClause([NotNull] SQLParser.HavingClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondition([NotNull] SQLParser.ConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondition([NotNull] SQLParser.ConditionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] SQLParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] SQLParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.comparisonOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparisonOperator([NotNull] SQLParser.ComparisonOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.comparisonOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparisonOperator([NotNull] SQLParser.ComparisonOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.logicalOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOperator([NotNull] SQLParser.LogicalOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.logicalOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOperator([NotNull] SQLParser.LogicalOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.tableName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTableName([NotNull] SQLParser.TableNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.tableName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTableName([NotNull] SQLParser.TableNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.columnName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColumnName([NotNull] SQLParser.ColumnNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.columnName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColumnName([NotNull] SQLParser.ColumnNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstant([NotNull] SQLParser.ConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstant([NotNull] SQLParser.ConstantContext context);
}
