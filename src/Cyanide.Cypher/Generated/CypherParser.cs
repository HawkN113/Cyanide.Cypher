//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Experiments\Cyanide.cypher\src\Cyanide.Cypher\Grammar\Cypher.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
internal partial class CypherParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, STRING=19, NUMBER=20, IDENTIFIER=21, WS=22;
	public const int
		RULE_cypherQuery = 0, RULE_matchClause = 1, RULE_matchPattern = 2, RULE_whereClause = 3, 
		RULE_returnClause = 4, RULE_condition = 5, RULE_comparison = 6, RULE_returnItems = 7, 
		RULE_groupByItems = 8, RULE_returnItem = 9, RULE_groupByItem = 10, RULE_logicalOperator = 11, 
		RULE_comparisonOperator = 12, RULE_property = 13, RULE_value = 14, RULE_label = 15, 
		RULE_relationshipLabel = 16, RULE_alias = 17, RULE_relationshipAlias = 18;
	public static readonly string[] ruleNames = {
		"cypherQuery", "matchClause", "matchPattern", "whereClause", "returnClause", 
		"condition", "comparison", "returnItems", "groupByItems", "returnItem", 
		"groupByItem", "logicalOperator", "comparisonOperator", "property", "value", 
		"label", "relationshipLabel", "alias", "relationshipAlias"
	};

	private static readonly string[] _LiteralNames = {
		null, "'MATCH'", "','", "'('", "':'", "')'", "'-['", "']->'", "'WHERE'", 
		"'RETURN'", "'.'", "'AND'", "'OR'", "'='", "'<>'", "'<'", "'<='", "'>'", 
		"'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "STRING", "NUMBER", "IDENTIFIER", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Cypher.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CypherParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CypherParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CypherParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	internal partial class CypherQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MatchClauseContext matchClause() {
			return GetRuleContext<MatchClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnClauseContext returnClause() {
			return GetRuleContext<ReturnClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CypherParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public CypherQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cypherQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterCypherQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitCypherQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCypherQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CypherQueryContext cypherQuery() {
		CypherQueryContext _localctx = new CypherQueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_cypherQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			matchClause();
			State = 40;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 39;
				whereClause();
				}
				break;
			}
			State = 42;
			returnClause();
			State = 43;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MatchClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MatchPatternContext[] matchPattern() {
			return GetRuleContexts<MatchPatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MatchPatternContext matchPattern(int i) {
			return GetRuleContext<MatchPatternContext>(i);
		}
		public MatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterMatchClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitMatchClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchClauseContext matchClause() {
		MatchClauseContext _localctx = new MatchClauseContext(Context, State);
		EnterRule(_localctx, 2, RULE_matchClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			Match(T__0);
			State = 46;
			matchPattern();
			State = 51;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 47;
					Match(T__1);
					State = 48;
					matchPattern();
					}
					} 
				}
				State = 53;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class MatchPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext[] alias() {
			return GetRuleContexts<AliasContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias(int i) {
			return GetRuleContext<AliasContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext[] label() {
			return GetRuleContexts<LabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label(int i) {
			return GetRuleContext<LabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationshipLabelContext relationshipLabel() {
			return GetRuleContext<RelationshipLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationshipAliasContext relationshipAlias() {
			return GetRuleContext<RelationshipAliasContext>(0);
		}
		public MatchPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_matchPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterMatchPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitMatchPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatchPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchPatternContext matchPattern() {
		MatchPatternContext _localctx = new MatchPatternContext(Context, State);
		EnterRule(_localctx, 4, RULE_matchPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(T__2);
			State = 55;
			alias();
			State = 56;
			Match(T__3);
			State = 57;
			label();
			State = 58;
			Match(T__4);
			State = 72;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 59;
				Match(T__5);
				State = 61;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 60;
					relationshipAlias();
					}
					break;
				}
				State = 63;
				Match(T__3);
				State = 64;
				relationshipLabel();
				State = 65;
				Match(T__6);
				State = 66;
				Match(T__2);
				State = 67;
				alias();
				State = 68;
				Match(T__3);
				State = 69;
				label();
				State = 70;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 6, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(T__7);
			State = 75;
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ReturnClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnItemsContext returnItems() {
			return GetRuleContext<ReturnItemsContext>(0);
		}
		public ReturnClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterReturnClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitReturnClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnClauseContext returnClause() {
		ReturnClauseContext _localctx = new ReturnClauseContext(Context, State);
		EnterRule(_localctx, 8, RULE_returnClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(T__8);
			State = 78;
			returnItems();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext[] comparison() {
			return GetRuleContexts<ComparisonContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison(int i) {
			return GetRuleContext<ComparisonContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext[] logicalOperator() {
			return GetRuleContexts<LogicalOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator(int i) {
			return GetRuleContext<LogicalOperatorContext>(i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 10, RULE_condition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			comparison();
			State = 86;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 81;
					logicalOperator();
					State = 82;
					comparison();
					}
					} 
				}
				State = 88;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 12, RULE_comparison);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			property();
			State = 90;
			comparisonOperator();
			State = 91;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ReturnItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReturnItemContext[] returnItem() {
			return GetRuleContexts<ReturnItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnItemContext returnItem(int i) {
			return GetRuleContext<ReturnItemContext>(i);
		}
		public ReturnItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterReturnItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitReturnItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnItemsContext returnItems() {
		ReturnItemsContext _localctx = new ReturnItemsContext(Context, State);
		EnterRule(_localctx, 14, RULE_returnItems);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			returnItem();
			State = 98;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 94;
					Match(T__1);
					State = 95;
					returnItem();
					}
					} 
				}
				State = 100;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class GroupByItemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupByItemContext[] groupByItem() {
			return GetRuleContexts<GroupByItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByItemContext groupByItem(int i) {
			return GetRuleContext<GroupByItemContext>(i);
		}
		public GroupByItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByItems; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterGroupByItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitGroupByItems(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByItemsContext groupByItems() {
		GroupByItemsContext _localctx = new GroupByItemsContext(Context, State);
		EnterRule(_localctx, 16, RULE_groupByItems);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			groupByItem();
			State = 106;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 102;
					Match(T__1);
					State = 103;
					groupByItem();
					}
					} 
				}
				State = 108;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ReturnItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public ReturnItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterReturnItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitReturnItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnItemContext returnItem() {
		ReturnItemContext _localctx = new ReturnItemContext(Context, State);
		EnterRule(_localctx, 18, RULE_returnItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			alias();
			State = 110;
			Match(T__9);
			State = 111;
			property();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class GroupByItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public GroupByItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterGroupByItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitGroupByItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByItemContext groupByItem() {
		GroupByItemContext _localctx = new GroupByItemContext(Context, State);
		EnterRule(_localctx, 20, RULE_groupByItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			alias();
			State = 114;
			Match(T__9);
			State = 115;
			property();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class LogicalOperatorContext : ParserRuleContext {
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 22, RULE_logicalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__11) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ComparisonOperatorContext : ParserRuleContext {
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 24, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 516096L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CypherParser.IDENTIFIER, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 26, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(CypherParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(CypherParser.NUMBER, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 28, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==NUMBER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CypherParser.IDENTIFIER, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 30, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class RelationshipLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CypherParser.IDENTIFIER, 0); }
		public RelationshipLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationshipLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterRelationshipLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitRelationshipLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationshipLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationshipLabelContext relationshipLabel() {
		RelationshipLabelContext _localctx = new RelationshipLabelContext(Context, State);
		EnterRule(_localctx, 32, RULE_relationshipLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class AliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CypherParser.IDENTIFIER, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 34, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class RelationshipAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(CypherParser.IDENTIFIER, 0); }
		public RelationshipAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationshipAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.EnterRelationshipAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICypherListener typedListener = listener as ICypherListener;
			if (typedListener != null) typedListener.ExitRelationshipAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICypherVisitor<TResult> typedVisitor = visitor as ICypherVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationshipAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationshipAliasContext relationshipAlias() {
		RelationshipAliasContext _localctx = new RelationshipAliasContext(Context, State);
		EnterRule(_localctx, 36, RULE_relationshipAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,22,134,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,3,0,41,8,0,1,0,1,0,1,0,
		1,1,1,1,1,1,1,1,5,1,50,8,1,10,1,12,1,53,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,3,2,62,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,73,8,2,1,3,1,3,1,
		3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,5,5,85,8,5,10,5,12,5,88,9,5,1,6,1,6,1,6,
		1,6,1,7,1,7,1,7,5,7,97,8,7,10,7,12,7,100,9,7,1,8,1,8,1,8,5,8,105,8,8,10,
		8,12,8,108,9,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,
		1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,0,0,19,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,0,3,1,0,11,12,1,0,
		13,18,1,0,19,20,121,0,38,1,0,0,0,2,45,1,0,0,0,4,54,1,0,0,0,6,74,1,0,0,
		0,8,77,1,0,0,0,10,80,1,0,0,0,12,89,1,0,0,0,14,93,1,0,0,0,16,101,1,0,0,
		0,18,109,1,0,0,0,20,113,1,0,0,0,22,117,1,0,0,0,24,119,1,0,0,0,26,121,1,
		0,0,0,28,123,1,0,0,0,30,125,1,0,0,0,32,127,1,0,0,0,34,129,1,0,0,0,36,131,
		1,0,0,0,38,40,3,2,1,0,39,41,3,6,3,0,40,39,1,0,0,0,40,41,1,0,0,0,41,42,
		1,0,0,0,42,43,3,8,4,0,43,44,5,0,0,1,44,1,1,0,0,0,45,46,5,1,0,0,46,51,3,
		4,2,0,47,48,5,2,0,0,48,50,3,4,2,0,49,47,1,0,0,0,50,53,1,0,0,0,51,49,1,
		0,0,0,51,52,1,0,0,0,52,3,1,0,0,0,53,51,1,0,0,0,54,55,5,3,0,0,55,56,3,34,
		17,0,56,57,5,4,0,0,57,58,3,30,15,0,58,72,5,5,0,0,59,61,5,6,0,0,60,62,3,
		36,18,0,61,60,1,0,0,0,61,62,1,0,0,0,62,63,1,0,0,0,63,64,5,4,0,0,64,65,
		3,32,16,0,65,66,5,7,0,0,66,67,5,3,0,0,67,68,3,34,17,0,68,69,5,4,0,0,69,
		70,3,30,15,0,70,71,5,5,0,0,71,73,1,0,0,0,72,59,1,0,0,0,72,73,1,0,0,0,73,
		5,1,0,0,0,74,75,5,8,0,0,75,76,3,10,5,0,76,7,1,0,0,0,77,78,5,9,0,0,78,79,
		3,14,7,0,79,9,1,0,0,0,80,86,3,12,6,0,81,82,3,22,11,0,82,83,3,12,6,0,83,
		85,1,0,0,0,84,81,1,0,0,0,85,88,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,
		11,1,0,0,0,88,86,1,0,0,0,89,90,3,26,13,0,90,91,3,24,12,0,91,92,3,28,14,
		0,92,13,1,0,0,0,93,98,3,18,9,0,94,95,5,2,0,0,95,97,3,18,9,0,96,94,1,0,
		0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,15,1,0,0,0,100,98,1,
		0,0,0,101,106,3,20,10,0,102,103,5,2,0,0,103,105,3,20,10,0,104,102,1,0,
		0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,17,1,0,0,0,108,
		106,1,0,0,0,109,110,3,34,17,0,110,111,5,10,0,0,111,112,3,26,13,0,112,19,
		1,0,0,0,113,114,3,34,17,0,114,115,5,10,0,0,115,116,3,26,13,0,116,21,1,
		0,0,0,117,118,7,0,0,0,118,23,1,0,0,0,119,120,7,1,0,0,120,25,1,0,0,0,121,
		122,5,21,0,0,122,27,1,0,0,0,123,124,7,2,0,0,124,29,1,0,0,0,125,126,5,21,
		0,0,126,31,1,0,0,0,127,128,5,21,0,0,128,33,1,0,0,0,129,130,5,21,0,0,130,
		35,1,0,0,0,131,132,5,21,0,0,132,37,1,0,0,0,7,40,51,61,72,86,98,106
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
